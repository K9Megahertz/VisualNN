//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// 
// MIT License
// 
// Copyright(c) 2023 Gerald Filimonov
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and /or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "instancebuffer.h"


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  CTORs/DTORs
//
//
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


InstanceBuffer::InstanceBuffer(std::vector<glm::mat4> modelMatrices, unsigned int numbytes) {

    m_InstanceAttributes.reserve(100000);
    glGenBuffers(1, &m_id); GLError::GLCheckError();
    glBindBuffer(GL_ARRAY_BUFFER, m_id); GLError::GLCheckError();
    glBufferData(GL_ARRAY_BUFFER, numbytes * sizeof(glm::mat4), &modelMatrices[0], GL_STATIC_DRAW); GLError::GLCheckError();

    unsigned int stride = sizeof(glm::mat4) + sizeof(glm::vec4) + sizeof(glm::vec4);

    glEnableVertexAttribArray(5); GLError::GLCheckError();
    glVertexAttribPointer(5, 4, GL_FLOAT, GL_FALSE, stride, (void *)(0 * sizeof(glm::vec4)));
    glVertexAttribDivisor(5, 1);

    glEnableVertexAttribArray(6); GLError::GLCheckError();
    glVertexAttribPointer(6, 4, GL_FLOAT, GL_FALSE, stride, (void *)(1 * sizeof(glm::vec4)));
    glVertexAttribDivisor(6, 1);

    glEnableVertexAttribArray(7); GLError::GLCheckError();
    glVertexAttribPointer(7, 4, GL_FLOAT, GL_FALSE, stride, (void *)(2 * sizeof(glm::vec4)));
    glVertexAttribDivisor(7, 1);

    glEnableVertexAttribArray(8); GLError::GLCheckError();
    glVertexAttribPointer(8, 4, GL_FLOAT, GL_FALSE, stride, (void *)(3 * sizeof(glm::vec4)));
    glVertexAttribDivisor(8, 1);

    glEnableVertexAttribArray(9); GLError::GLCheckError();
    glVertexAttribPointer(9, 4, GL_FLOAT, GL_FALSE, stride, (void *)(4 * sizeof(glm::vec4)));
    glVertexAttribDivisor(9, 1);

    glEnableVertexAttribArray(10); GLError::GLCheckError();
    glVertexAttribPointer(10, 4, GL_FLOAT, GL_FALSE, stride, (void *)(5 * sizeof(glm::vec4)));
    glVertexAttribDivisor(10, 1);
    

    unbind(); GLError::GLCheckError();

    Logger::Append(Logger::LogLevel::LOGLEVEL_INFO, "  Generated Instance Buffer with id: " + std::to_string(m_id));
}

InstanceBuffer::InstanceBuffer(unsigned int numbytes) {

    m_InstanceAttributes.reserve(100000);
    glGenBuffers(1, &m_id); GLError::GLCheckError();
    glBindBuffer(GL_ARRAY_BUFFER, m_id); GLError::GLCheckError();
    glBufferData(GL_ARRAY_BUFFER, numbytes, nullptr, GL_STATIC_DRAW); GLError::GLCheckError();

    unsigned int stride = sizeof(glm::mat4) + sizeof(glm::vec4) + sizeof(glm::vec4);

    glEnableVertexAttribArray(5); GLError::GLCheckError();
    glVertexAttribPointer(5, 4, GL_FLOAT, GL_FALSE, stride, (void *)(0 * sizeof(glm::vec4)));
    glVertexAttribDivisor(5, 1);

    glEnableVertexAttribArray(6); GLError::GLCheckError();
    glVertexAttribPointer(6, 4, GL_FLOAT, GL_FALSE, stride, (void *)(1 * sizeof(glm::vec4)));
    glVertexAttribDivisor(6, 1);

    glEnableVertexAttribArray(7); GLError::GLCheckError();
    glVertexAttribPointer(7, 4, GL_FLOAT, GL_FALSE, stride, (void *)(2 * sizeof(glm::vec4)));
    glVertexAttribDivisor(7, 1);

    glEnableVertexAttribArray(8); GLError::GLCheckError();
    glVertexAttribPointer(8, 4, GL_FLOAT, GL_FALSE, stride, (void *)(3 * sizeof(glm::vec4)));
    glVertexAttribDivisor(8, 1);

    glEnableVertexAttribArray(9); GLError::GLCheckError();
    glVertexAttribPointer(9, 4, GL_FLOAT, GL_FALSE, stride, (void *)(4 * sizeof(glm::vec4)));
    glVertexAttribDivisor(9, 1);

    glEnableVertexAttribArray(10); GLError::GLCheckError();
    glVertexAttribPointer(10, 4, GL_FLOAT, GL_FALSE, stride, (void *)(5 * sizeof(glm::vec4)));
    glVertexAttribDivisor(10, 1);

    unbind(); GLError::GLCheckError();

    Logger::Append(Logger::LogLevel::LOGLEVEL_INFO, "  Generated Instance Buffer with id: " + std::to_string(m_id));
}

InstanceBuffer::~InstanceBuffer() {

    Logger::Append(Logger::LogLevel::LOGLEVEL_INFO, "  Deleting Instance Buffer with id: " + std::to_string(m_id));
    glDeleteBuffers(1, &m_id);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Function bind()
//
//
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void InstanceBuffer::bind() {
    glBindBuffer(GL_ARRAY_BUFFER, m_id);
    setData();
  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Function setData()
//
//
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void InstanceBuffer::setData() {
    
    glBufferSubData(GL_ARRAY_BUFFER, 0, m_InstanceAttributes.size() * sizeof(InstanceAttributes), (const void *)m_InstanceAttributes.data());
    
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Function unbind()
//
//
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void InstanceBuffer::unbind() {

    glBindBuffer(GL_ARRAY_BUFFER, 0);

}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Function pushInstanceAttributes()
//
//
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void InstanceBuffer::pushInstanceAttributes(InstanceAttributes ia) {
    m_InstanceAttributes.push_back(ia);
    m_numInstances++;

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Function pushInstanceAttributesSet()
//
//
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void InstanceBuffer::pushInstanceAttributesSet(std::vector<InstanceAttributes> ia) {
    m_InstanceAttributes.insert(m_InstanceAttributes.end(), ia.begin(), ia.end());
    m_numInstances+=ia.size();

}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Function reset()
//
//
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void InstanceBuffer::reset() {
    m_numInstances = 0;
    m_InstanceAttributes.clear();
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Function getAttributes()
//
//
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

std::vector<InstanceAttributes> InstanceBuffer::getAttributes() {
    return m_InstanceAttributes;
}